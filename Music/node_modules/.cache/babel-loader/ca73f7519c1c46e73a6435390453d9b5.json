{"ast":null,"code":"import * as types from '../actions/action-types';\nimport searchPrevTrack from '../utils/searchPrevTrack';\nimport skipUnavailableTracks from '../utils/skipUnavailableTracks';\nexport var stopPlay = function stopPlay() {\n  return {\n    type: types.STOP_PLAY\n  };\n};\nexport var playNextTrack = function playNextTrack(playlist, songInd) {\n  return function (dispatch) {\n    if (songInd === -1) {\n      return;\n    }\n\n    var nextSongInd = skipUnavailableTracks(playlist, songInd + 1);\n\n    if (nextSongInd === -1) {\n      return dispatch(stopPlay());\n    }\n\n    dispatch({\n      type: types.STOP_TRACK\n    });\n    setTimeout(function () {\n      dispatch({\n        activeTrackId: skipUnavailableTracks(playlist, songInd + 1),\n        type: types.PLAY_NEXT_TRACK\n      });\n    }, 0);\n  };\n};\nexport var playPrevTrack = function playPrevTrack(playlist, songInd) {\n  return function (dispatch) {\n    if (songInd === -1) {\n      return;\n    }\n\n    var prevSongInd = searchPrevTrack(playlist, songInd);\n\n    if (prevSongInd === -1) {\n      return {\n        type: 'NOOP'\n      };\n    }\n\n    dispatch({\n      type: types.STOP_TRACK\n    });\n    setTimeout(function () {\n      dispatch({\n        activeTrackId: prevSongInd,\n        type: types.PLAY_NEXT_TRACK\n      });\n    }, 0);\n  };\n};\nexport var setPause = function setPause() {\n  return {\n    type: types.SET_PAUSE\n  };\n};\nexport var unpause = function unpause() {\n  return {\n    type: types.UNPAUSE\n  };\n};","map":{"version":3,"sources":["C:/project/MusicAppMERN-master/MusicAppMERN-master/Music/src/actions/player-control-actions.js"],"names":["types","searchPrevTrack","skipUnavailableTracks","stopPlay","type","STOP_PLAY","playNextTrack","playlist","songInd","dispatch","nextSongInd","STOP_TRACK","setTimeout","activeTrackId","PLAY_NEXT_TRACK","playPrevTrack","prevSongInd","setPause","SET_PAUSE","unpause","UNPAUSE"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,yBAAvB;AAEA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,qBAAP,MAAkC,gCAAlC;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAO;AAC7BC,IAAAA,IAAI,EAAEJ,KAAK,CAACK;AADiB,GAAP;AAAA,CAAjB;AAIP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC9D,QAAID,OAAO,KAAK,CAAC,CAAjB,EAAoB;AAClB;AACD;;AAED,QAAME,WAAW,GAAGR,qBAAqB,CAACK,QAAD,EAAWC,OAAO,GAAG,CAArB,CAAzC;;AAEA,QAAIE,WAAW,KAAK,CAAC,CAArB,EAAwB;AACtB,aAAOD,QAAQ,CAACN,QAAQ,EAAT,CAAf;AACD;;AAEDM,IAAAA,QAAQ,CAAC;AAAEL,MAAAA,IAAI,EAAEJ,KAAK,CAACW;AAAd,KAAD,CAAR;AAEAC,IAAAA,UAAU,CAAC,YAAM;AACfH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,aAAa,EAAEX,qBAAqB,CAACK,QAAD,EAAWC,OAAO,GAAG,CAArB,CAD7B;AAEPJ,QAAAA,IAAI,EAAEJ,KAAK,CAACc;AAFL,OAAD,CAAR;AAID,KALS,EAKP,CALO,CAAV;AAMD,GAnB4B;AAAA,CAAtB;AAqBP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACR,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC9D,QAAID,OAAO,KAAK,CAAC,CAAjB,EAAoB;AAClB;AACD;;AACD,QAAMQ,WAAW,GAAGf,eAAe,CAACM,QAAD,EAAWC,OAAX,CAAnC;;AACA,QAAIQ,WAAW,KAAK,CAAC,CAArB,EAAwB;AACtB,aAAO;AAAEZ,QAAAA,IAAI,EAAE;AAAR,OAAP;AACD;;AACDK,IAAAA,QAAQ,CAAC;AAAEL,MAAAA,IAAI,EAAEJ,KAAK,CAACW;AAAd,KAAD,CAAR;AACAC,IAAAA,UAAU,CAAC,YAAM;AACfH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,aAAa,EAAEG,WADR;AAEPZ,QAAAA,IAAI,EAAEJ,KAAK,CAACc;AAFL,OAAD,CAAR;AAID,KALS,EAKP,CALO,CAAV;AAMD,GAf4B;AAAA,CAAtB;AAiBP,OAAO,IAAMG,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAC5B,SAAO;AACLb,IAAAA,IAAI,EAAEJ,KAAK,CAACkB;AADP,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,SAAO;AAC5Bf,IAAAA,IAAI,EAAEJ,KAAK,CAACoB;AADgB,GAAP;AAAA,CAAhB","sourcesContent":["import * as types from '../actions/action-types';\n\nimport searchPrevTrack from '../utils/searchPrevTrack';\nimport skipUnavailableTracks from '../utils/skipUnavailableTracks';\n\nexport const stopPlay = () => ({\n  type: types.STOP_PLAY,\n});\n\nexport const playNextTrack = (playlist, songInd) => dispatch => {\n  if (songInd === -1) {\n    return;\n  }\n\n  const nextSongInd = skipUnavailableTracks(playlist, songInd + 1);\n\n  if (nextSongInd === -1) {\n    return dispatch(stopPlay());\n  }\n\n  dispatch({ type: types.STOP_TRACK });\n\n  setTimeout(() => {\n    dispatch({\n      activeTrackId: skipUnavailableTracks(playlist, songInd + 1),\n      type: types.PLAY_NEXT_TRACK,\n    });\n  }, 0);\n};\n\nexport const playPrevTrack = (playlist, songInd) => dispatch => {\n  if (songInd === -1) {\n    return;\n  }\n  const prevSongInd = searchPrevTrack(playlist, songInd);\n  if (prevSongInd === -1) {\n    return { type: 'NOOP' };\n  }\n  dispatch({ type: types.STOP_TRACK });\n  setTimeout(() => {\n    dispatch({\n      activeTrackId: prevSongInd,\n      type: types.PLAY_NEXT_TRACK,\n    });\n  }, 0);\n};\n\nexport const setPause = () => {\n  return {\n    type: types.SET_PAUSE,\n  };\n};\n\nexport const unpause = () => ({\n  type: types.UNPAUSE,\n});\n"]},"metadata":{},"sourceType":"module"}