{"ast":null,"code":"import _classCallCheck from \"C:\\\\project\\\\MusicAppMERN-master\\\\MusicAppMERN-master\\\\Music\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\project\\\\MusicAppMERN-master\\\\MusicAppMERN-master\\\\Music\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\project\\\\MusicAppMERN-master\\\\MusicAppMERN-master\\\\Music\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\project\\\\MusicAppMERN-master\\\\MusicAppMERN-master\\\\Music\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\project\\\\MusicAppMERN-master\\\\MusicAppMERN-master\\\\Music\\\\src\\\\containers\\\\PlayerContainer\\\\PlayerContainer.tsx\";\nimport React, { Component } from 'react'; // import { Action, Dispatch } from 'redux';\n\nimport { connect } from 'react-redux';\nimport NowPlaying from '../../components/NowPlaying';\nimport PlayerControls from '../../components/PlayerControls';\nimport VolumeControl from '../../components/VolumeControl';\nimport { Wrapper } from './styled';\nimport logo from './note.png';\nimport * as actions from '../../actions';\nimport searchPrevTrack from '../../utils/searchPrevTrack';\nimport skipUnavailableTracks from '../../utils/skipUnavailableTracks';\n\nvar PlayerContainer = /*#__PURE__*/function (_Component) {\n  _inherits(PlayerContainer, _Component);\n\n  var _super = _createSuper(PlayerContainer);\n\n  function PlayerContainer() {\n    var _this;\n\n    _classCallCheck(this, PlayerContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.audioEl = new Audio();\n    _this.state = {\n      currentTime: 0,\n      hasNextTrack: false,\n      hasPrevTrack: false,\n      paused: false,\n      playing: false,\n      totalTime: 0\n    };\n\n    _this.handleDataLoaded = function () {\n      if (_this.state.totalTime !== _this.audioEl.duration) {\n        _this.setState(function () {\n          return {\n            totalTime: _this.audioEl.duration\n          };\n        });\n      }\n    };\n\n    _this.handleTimeUpdate = function () {\n      var currentTime = _this.audioEl.currentTime;\n\n      if (currentTime !== _this.state.currentTime) {\n        _this.setState(function () {\n          return {\n            currentTime\n          };\n        });\n      }\n    };\n\n    _this.playTrack = function () {\n      var _this$props = _this.props,\n          playlist = _this$props.playlist,\n          songInd = _this$props.songInd;\n      var currentTime = _this.state.currentTime;\n\n      if (songInd === -1) {\n        return _this.pauseTrack();\n      }\n\n      var hasNextTrack = skipUnavailableTracks(playlist, songInd + 1) !== -1;\n      var hasPrevTrack = searchPrevTrack(playlist, songInd) !== -1;\n\n      _this.setState(function () {\n        return {\n          hasNextTrack,\n          hasPrevTrack\n        };\n      });\n\n      _this.audioEl.src = playlist[songInd].track.preview_url || '';\n      _this.audioEl.volume = 0.3;\n      _this.audioEl.currentTime = currentTime;\n\n      var playPromise = _this.audioEl.play(); // Don't console log error\n\n\n      playPromise.catch(function (noop) {\n        return noop;\n      });\n    };\n\n    _this.stopTrack = function () {\n      _this.audioEl.pause();\n\n      _this.audioEl.currentTime = 0;\n    };\n\n    _this.pauseTrack = function () {\n      _this.audioEl.pause();\n\n      _this.props.pause();\n    };\n\n    _this.handleEnded = function () {\n      if (!_this.state.hasNextTrack) {\n        return _this.props.stop();\n      }\n\n      var _this$props2 = _this.props,\n          playlist = _this$props2.playlist,\n          songInd = _this$props2.songInd,\n          playNextTrack = _this$props2.playNextTrack;\n      playNextTrack(playlist, songInd);\n    };\n\n    _this.handlePlay = function () {\n      if (!_this.props.playlist) {\n        return;\n      }\n\n      _this.props.unpause();\n    };\n\n    _this.handlePause = function () {\n      var _this$props3 = _this.props,\n          isPaused = _this$props3.isPaused,\n          pause = _this$props3.pause,\n          unpause = _this$props3.unpause;\n      isPaused ? unpause() : pause();\n    };\n\n    _this.handlePrev = function () {\n      var _this$props4 = _this.props,\n          playlist = _this$props4.playlist,\n          songInd = _this$props4.songInd,\n          playPrevTrack = _this$props4.playPrevTrack;\n\n      if (!_this.state.hasPrevTrack) {\n        return;\n      }\n\n      playPrevTrack(playlist, songInd);\n    };\n\n    _this.handleVolumeChange = function (value) {\n      _this.audioEl.volume = value;\n    };\n\n    return _this;\n  }\n\n  _createClass(PlayerContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.audioEl.addEventListener('ended', this.handleEnded);\n      this.audioEl.addEventListener('timeupdate', this.handleTimeUpdate);\n      this.audioEl.addEventListener('loadeddata', this.handleDataLoaded);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.audioEl.removeEventListener('ended', this.handleEnded);\n      this.audioEl.removeEventListener('timeupdate', this.handleTimeUpdate);\n      this.audioEl.removeEventListener('loadeddata', this.handleDataLoaded);\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(_ref) {\n      var isPlaying = _ref.isPlaying,\n          isPaused = _ref.isPaused;\n      var _this$state = this.state,\n          playing = _this$state.playing,\n          paused = _this$state.paused;\n\n      if (isPlaying !== playing || isPaused !== paused) {\n        this.setState(function (_ref2) {\n          var currentTime = _ref2.currentTime;\n          return {\n            currentTime: !isPlaying && !isPaused ? 0 : currentTime,\n            paused: isPaused,\n            playing: isPlaying\n          };\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this$state2 = this.state,\n          paused = _this$state2.paused,\n          playing = _this$state2.playing;\n\n      if (playing && !paused && this.audioEl.paused) {\n        return this.playTrack();\n      }\n\n      if (playing && paused) {\n        return this.pauseTrack();\n      }\n\n      if (!playing && !paused) {\n        this.stopTrack();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          isPlaying = _this$props5.isPlaying,\n          isPaused = _this$props5.isPaused,\n          playlist = _this$props5.playlist,\n          songInd = _this$props5.songInd;\n      var _this$state3 = this.state,\n          hasNextTrack = _this$state3.hasNextTrack,\n          hasPrevTrack = _this$state3.hasPrevTrack;\n      var currentTrack = playlist && songInd !== -1 ? playlist[songInd].track : null;\n      return /*#__PURE__*/React.createElement(Wrapper, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(NowPlaying, {\n        artist: currentTrack ? currentTrack.artists[0].name : '',\n        title: currentTrack ? currentTrack.name : '',\n        src: currentTrack ? currentTrack.album.images[0].url : logo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(PlayerControls, {\n        isPlaying: !isPaused && isPlaying,\n        hasNextTrack: hasNextTrack,\n        hasPrevTrack: hasPrevTrack,\n        handlePlay: this.handlePlay,\n        handlePause: this.handlePause,\n        handleNext: this.handleEnded,\n        handlePrev: this.handlePrev,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(VolumeControl, {\n        handleChange: this.handleVolumeChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return PlayerContainer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isPaused: state.isPaused,\n    isPlaying: state.isPlaying,\n    playlist: state.tracklist,\n    songInd: state.activeTrackId\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    pause: function pause() {\n      dispatch(actions.setPause());\n    },\n    playNextTrack: function playNextTrack(playlist, songInd) {\n      dispatch(actions.playNextTrack(playlist, songInd));\n    },\n    playPrevTrack: function playPrevTrack(playlist, songInd) {\n      dispatch(actions.playPrevTrack(playlist, songInd));\n    },\n    stop: function stop() {\n      return dispatch(actions.stopPlay());\n    },\n    unpause: function unpause() {\n      dispatch(actions.unpause());\n    }\n  };\n};\n\nexport { PlayerContainer };\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerContainer);","map":{"version":3,"sources":["C:/project/MusicAppMERN-master/MusicAppMERN-master/Music/src/containers/PlayerContainer/PlayerContainer.tsx"],"names":["React","Component","connect","NowPlaying","PlayerControls","VolumeControl","Wrapper","logo","actions","searchPrevTrack","skipUnavailableTracks","PlayerContainer","audioEl","Audio","state","currentTime","hasNextTrack","hasPrevTrack","paused","playing","totalTime","handleDataLoaded","duration","setState","handleTimeUpdate","playTrack","props","playlist","songInd","pauseTrack","src","track","preview_url","volume","playPromise","play","catch","noop","stopTrack","pause","handleEnded","stop","playNextTrack","handlePlay","unpause","handlePause","isPaused","handlePrev","playPrevTrack","handleVolumeChange","value","addEventListener","removeEventListener","isPlaying","currentTrack","artists","name","album","images","url","mapStateToProps","tracklist","activeTrackId","mapDispatchToProps","dispatch","setPause","stopPlay"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AAEA,SAASC,OAAT,QAAwB,UAAxB;AAEA,OAAOC,IAAP,MAAiB,YAAjB;AAEA,OAAO,KAAKC,OAAZ,MAAyB,eAAzB;AAEA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,qBAAP,MAAkC,mCAAlC;;IAuCMC,e;;;;;;;;;;;;;;;UACJC,O,GAAU,IAAIC,KAAJ,E;UACVC,K,GAAQ;AACNC,MAAAA,WAAW,EAAE,CADP;AAENC,MAAAA,YAAY,EAAE,KAFR;AAGNC,MAAAA,YAAY,EAAE,KAHR;AAINC,MAAAA,MAAM,EAAE,KAJF;AAKNC,MAAAA,OAAO,EAAE,KALH;AAMNC,MAAAA,SAAS,EAAE;AANL,K;;UAqBRC,gB,GAAmB,YAAM;AACvB,UAAI,MAAKP,KAAL,CAAWM,SAAX,KAAyB,MAAKR,OAAL,CAAaU,QAA1C,EAAoD;AAClD,cAAKC,QAAL,CAAc;AAAA,iBAAO;AACnBH,YAAAA,SAAS,EAAE,MAAKR,OAAL,CAAaU;AADL,WAAP;AAAA,SAAd;AAGD;AACF,K;;UAEDE,gB,GAAmB,YAAM;AAAA,UACfT,WADe,GACC,MAAKH,OADN,CACfG,WADe;;AAEvB,UAAIA,WAAW,KAAK,MAAKD,KAAL,CAAWC,WAA/B,EAA4C;AAC1C,cAAKQ,QAAL,CAAc;AAAA,iBAAO;AAAER,YAAAA;AAAF,WAAP;AAAA,SAAd;AACD;AACF,K;;UAEDU,S,GAAY,YAAM;AAAA,wBACc,MAAKC,KADnB;AAAA,UACRC,QADQ,eACRA,QADQ;AAAA,UACEC,OADF,eACEA,OADF;AAAA,UAERb,WAFQ,GAEQ,MAAKD,KAFb,CAERC,WAFQ;;AAIhB,UAAIa,OAAO,KAAK,CAAC,CAAjB,EAAoB;AAClB,eAAO,MAAKC,UAAL,EAAP;AACD;;AAED,UAAMb,YAAY,GAAGN,qBAAqB,CAACiB,QAAD,EAAWC,OAAO,GAAG,CAArB,CAArB,KAAiD,CAAC,CAAvE;AACA,UAAMX,YAAY,GAAGR,eAAe,CAACkB,QAAD,EAAWC,OAAX,CAAf,KAAuC,CAAC,CAA7D;;AAEA,YAAKL,QAAL,CAAc;AAAA,eAAO;AACnBP,UAAAA,YADmB;AAEnBC,UAAAA;AAFmB,SAAP;AAAA,OAAd;;AAKA,YAAKL,OAAL,CAAakB,GAAb,GAAmBH,QAAQ,CAACC,OAAD,CAAR,CAAkBG,KAAlB,CAAwBC,WAAxB,IAAuC,EAA1D;AACA,YAAKpB,OAAL,CAAaqB,MAAb,GAAsB,GAAtB;AACA,YAAKrB,OAAL,CAAaG,WAAb,GAA2BA,WAA3B;;AACA,UAAMmB,WAAW,GAAG,MAAKtB,OAAL,CAAauB,IAAb,EAApB,CAnBgB,CAoBhB;;;AACAD,MAAAA,WAAW,CAACE,KAAZ,CAAkB,UAAAC,IAAI;AAAA,eAAIA,IAAJ;AAAA,OAAtB;AACD,K;;UAEDC,S,GAAY,YAAM;AAChB,YAAK1B,OAAL,CAAa2B,KAAb;;AACA,YAAK3B,OAAL,CAAaG,WAAb,GAA2B,CAA3B;AACD,K;;UAEDc,U,GAAa,YAAM;AACjB,YAAKjB,OAAL,CAAa2B,KAAb;;AACA,YAAKb,KAAL,CAAWa,KAAX;AACD,K;;UAEDC,W,GAAc,YAAM;AAClB,UAAI,CAAC,MAAK1B,KAAL,CAAWE,YAAhB,EAA8B;AAC5B,eAAO,MAAKU,KAAL,CAAWe,IAAX,EAAP;AACD;;AAHiB,yBAI2B,MAAKf,KAJhC;AAAA,UAIVC,QAJU,gBAIVA,QAJU;AAAA,UAIAC,OAJA,gBAIAA,OAJA;AAAA,UAISc,aAJT,gBAISA,aAJT;AAKlBA,MAAAA,aAAa,CAACf,QAAD,EAAWC,OAAX,CAAb;AACD,K;;UAEDe,U,GAAa,YAAM;AACjB,UAAI,CAAC,MAAKjB,KAAL,CAAWC,QAAhB,EAA0B;AACxB;AACD;;AACD,YAAKD,KAAL,CAAWkB,OAAX;AACD,K;;UAEDC,W,GAAc,YAAM;AAAA,yBACmB,MAAKnB,KADxB;AAAA,UACVoB,QADU,gBACVA,QADU;AAAA,UACAP,KADA,gBACAA,KADA;AAAA,UACOK,OADP,gBACOA,OADP;AAElBE,MAAAA,QAAQ,GAAGF,OAAO,EAAV,GAAeL,KAAK,EAA5B;AACD,K;;UAEDQ,U,GAAa,YAAM;AAAA,yBAC4B,MAAKrB,KADjC;AAAA,UACTC,QADS,gBACTA,QADS;AAAA,UACCC,OADD,gBACCA,OADD;AAAA,UACUoB,aADV,gBACUA,aADV;;AAEjB,UAAI,CAAC,MAAKlC,KAAL,CAAWG,YAAhB,EAA8B;AAC5B;AACD;;AACD+B,MAAAA,aAAa,CAACrB,QAAD,EAAWC,OAAX,CAAb;AACD,K;;UAEDqB,kB,GAAqB,UAACC,KAAD,EAAmB;AACtC,YAAKtC,OAAL,CAAaqB,MAAb,GAAsBiB,KAAtB;AACD,K;;;;;;;wCA3FmB;AAClB,WAAKtC,OAAL,CAAauC,gBAAb,CAA8B,OAA9B,EAAuC,KAAKX,WAA5C;AACA,WAAK5B,OAAL,CAAauC,gBAAb,CAA8B,YAA9B,EAA4C,KAAK3B,gBAAjD;AACA,WAAKZ,OAAL,CAAauC,gBAAb,CAA8B,YAA9B,EAA4C,KAAK9B,gBAAjD;AACD;;;2CAEsB;AACrB,WAAKT,OAAL,CAAawC,mBAAb,CAAiC,OAAjC,EAA0C,KAAKZ,WAA/C;AACA,WAAK5B,OAAL,CAAawC,mBAAb,CAAiC,YAAjC,EAA+C,KAAK5B,gBAApD;AACA,WAAKZ,OAAL,CAAawC,mBAAb,CAAiC,YAAjC,EAA+C,KAAK/B,gBAApD;AACD;;;2DAyFE;AAAA,UALDgC,SAKC,QALDA,SAKC;AAAA,UAJDP,QAIC,QAJDA,QAIC;AAAA,wBAC2B,KAAKhC,KADhC;AAAA,UACOK,OADP,eACOA,OADP;AAAA,UACgBD,MADhB,eACgBA,MADhB;;AAED,UAAImC,SAAS,KAAKlC,OAAd,IAAyB2B,QAAQ,KAAK5B,MAA1C,EAAkD;AAChD,aAAKK,QAAL,CAAc;AAAA,cAAGR,WAAH,SAAGA,WAAH;AAAA,iBAAsB;AAClCA,YAAAA,WAAW,EAAE,CAACsC,SAAD,IAAc,CAACP,QAAf,GAA0B,CAA1B,GAA8B/B,WADT;AAElCG,YAAAA,MAAM,EAAE4B,QAF0B;AAGlC3B,YAAAA,OAAO,EAAEkC;AAHyB,WAAtB;AAAA,SAAd;AAKD;AACF;;;yCAEoB;AAAA,yBACS,KAAKvC,KADd;AAAA,UACXI,MADW,gBACXA,MADW;AAAA,UACHC,OADG,gBACHA,OADG;;AAEnB,UAAIA,OAAO,IAAI,CAACD,MAAZ,IAAsB,KAAKN,OAAL,CAAaM,MAAvC,EAA+C;AAC7C,eAAO,KAAKO,SAAL,EAAP;AACD;;AACD,UAAIN,OAAO,IAAID,MAAf,EAAuB;AACrB,eAAO,KAAKW,UAAL,EAAP;AACD;;AACD,UAAI,CAACV,OAAD,IAAY,CAACD,MAAjB,EAAyB;AACvB,aAAKoB,SAAL;AACD;AACF;;;6BAEQ;AAAA,yBAC4C,KAAKZ,KADjD;AAAA,UACC2B,SADD,gBACCA,SADD;AAAA,UACYP,QADZ,gBACYA,QADZ;AAAA,UACsBnB,QADtB,gBACsBA,QADtB;AAAA,UACgCC,OADhC,gBACgCA,OADhC;AAAA,yBAEgC,KAAKd,KAFrC;AAAA,UAECE,YAFD,gBAECA,YAFD;AAAA,UAEeC,YAFf,gBAEeA,YAFf;AAGP,UAAMqC,YAAY,GAChB3B,QAAQ,IAAIC,OAAO,KAAK,CAAC,CAAzB,GAA6BD,QAAQ,CAACC,OAAD,CAAR,CAAkBG,KAA/C,GAAuD,IADzD;AAGA,0BACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,UAAD;AACE,QAAA,MAAM,EAAEuB,YAAY,GAAGA,YAAY,CAACC,OAAb,CAAqB,CAArB,EAAwBC,IAA3B,GAAkC,EADxD;AAEE,QAAA,KAAK,EAAEF,YAAY,GAAGA,YAAY,CAACE,IAAhB,GAAuB,EAF5C;AAGE,QAAA,GAAG,EAAEF,YAAY,GAAGA,YAAY,CAACG,KAAb,CAAmBC,MAAnB,CAA0B,CAA1B,EAA6BC,GAAhC,GAAsCpD,IAHzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAME,oBAAC,cAAD;AACE,QAAA,SAAS,EAAE,CAACuC,QAAD,IAAaO,SAD1B;AAEE,QAAA,YAAY,EAAErC,YAFhB;AAGE,QAAA,YAAY,EAAEC,YAHhB;AAIE,QAAA,UAAU,EAAE,KAAK0B,UAJnB;AAKE,QAAA,WAAW,EAAE,KAAKE,WALpB;AAME,QAAA,UAAU,EAAE,KAAKL,WANnB;AAOE,QAAA,UAAU,EAAE,KAAKO,UAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,eAeE,oBAAC,aAAD;AAAe,QAAA,YAAY,EAAE,KAAKE,kBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAfF,CADF;AAmBD;;;;EA/J2BhD,S;;AAkK9B,IAAM2D,eAAe,GAAG,SAAlBA,eAAkB,CAAC9C,KAAD;AAAA,SAA8B;AACpDgC,IAAAA,QAAQ,EAAEhC,KAAK,CAACgC,QADoC;AAEpDO,IAAAA,SAAS,EAAEvC,KAAK,CAACuC,SAFmC;AAGpD1B,IAAAA,QAAQ,EAAEb,KAAK,CAAC+C,SAHoC;AAIpDjC,IAAAA,OAAO,EAAEd,KAAK,CAACgD;AAJqC,GAA9B;AAAA,CAAxB;;AAOA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,SAAoB;AAC7CzB,IAAAA,KAAK,EAAE,iBAAM;AACXyB,MAAAA,QAAQ,CAACxD,OAAO,CAACyD,QAAR,EAAD,CAAR;AACD,KAH4C;AAI7CvB,IAAAA,aAAa,EAAE,uBAACf,QAAD,EAAwBC,OAAxB,EAA4C;AACzDoC,MAAAA,QAAQ,CAACxD,OAAO,CAACkC,aAAR,CAAsBf,QAAtB,EAAgCC,OAAhC,CAAD,CAAR;AACD,KAN4C;AAO7CoB,IAAAA,aAAa,EAAE,uBAACrB,QAAD,EAAwBC,OAAxB,EAA4C;AACzDoC,MAAAA,QAAQ,CAACxD,OAAO,CAACwC,aAAR,CAAsBrB,QAAtB,EAAgCC,OAAhC,CAAD,CAAR;AACD,KAT4C;AAU7Ca,IAAAA,IAAI,EAAE;AAAA,aAAMuB,QAAQ,CAACxD,OAAO,CAAC0D,QAAR,EAAD,CAAd;AAAA,KAVuC;AAW7CtB,IAAAA,OAAO,EAAE,mBAAM;AACboB,MAAAA,QAAQ,CAACxD,OAAO,CAACoC,OAAR,EAAD,CAAR;AACD;AAb4C,GAApB;AAAA,CAA3B;;AAgBA,SAASjC,eAAT;AAEA,eAAeT,OAAO,CACpB0D,eADoB,EAEpBG,kBAFoB,CAAP,CAGbpD,eAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\n// import { Action, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\n\nimport NowPlaying from '../../components/NowPlaying';\nimport PlayerControls from '../../components/PlayerControls';\nimport VolumeControl from '../../components/VolumeControl';\n\nimport { Wrapper } from './styled';\n\nimport logo from './note.png';\n\nimport * as actions from '../../actions';\n\nimport searchPrevTrack from '../../utils/searchPrevTrack';\nimport skipUnavailableTracks from '../../utils/skipUnavailableTracks';\n\ntype TProps = IStateProps & IDispatchProps;\n\nexport interface IPlaylist {\n  track: {\n    album: {\n      images: Array<{ url: string }>;\n    };\n    artists: Array<{ name: string }>;\n    name: string;\n    preview_url: string | null;\n  };\n}\n\nexport interface IStateProps {\n  isPaused: boolean;\n  isPlaying: boolean;\n  playlist: IPlaylist[];\n  songInd: number;\n}\n\nexport interface IDispatchProps {\n  pause: () => void;\n  playNextTrack: (playlist: IPlaylist[], songInd: number) => void;\n  playPrevTrack: (playlist: IPlaylist[], songInd: number) => void;\n  stop: () => void;\n  unpause: () => void;\n}\n\ninterface IState {\n  currentTime: number;\n  hasNextTrack: boolean;\n  hasPrevTrack: boolean;\n  paused: boolean;\n  playing: boolean;\n  totalTime: number;\n}\n\nclass PlayerContainer extends Component<TProps, IState> {\n  audioEl = new Audio();\n  state = {\n    currentTime: 0,\n    hasNextTrack: false,\n    hasPrevTrack: false,\n    paused: false,\n    playing: false,\n    totalTime: 0,\n  };\n\n  componentDidMount() {\n    this.audioEl.addEventListener('ended', this.handleEnded);\n    this.audioEl.addEventListener('timeupdate', this.handleTimeUpdate);\n    this.audioEl.addEventListener('loadeddata', this.handleDataLoaded);\n  }\n\n  componentWillUnmount() {\n    this.audioEl.removeEventListener('ended', this.handleEnded);\n    this.audioEl.removeEventListener('timeupdate', this.handleTimeUpdate);\n    this.audioEl.removeEventListener('loadeddata', this.handleDataLoaded);\n  }\n\n  handleDataLoaded = () => {\n    if (this.state.totalTime !== this.audioEl.duration) {\n      this.setState(() => ({\n        totalTime: this.audioEl.duration,\n      }));\n    }\n  };\n\n  handleTimeUpdate = () => {\n    const { currentTime } = this.audioEl;\n    if (currentTime !== this.state.currentTime) {\n      this.setState(() => ({ currentTime }));\n    }\n  };\n\n  playTrack = () => {\n    const { playlist, songInd } = this.props;\n    const { currentTime } = this.state;\n\n    if (songInd === -1) {\n      return this.pauseTrack();\n    }\n\n    const hasNextTrack = skipUnavailableTracks(playlist, songInd + 1) !== -1;\n    const hasPrevTrack = searchPrevTrack(playlist, songInd) !== -1;\n\n    this.setState(() => ({\n      hasNextTrack,\n      hasPrevTrack,\n    }));\n\n    this.audioEl.src = playlist[songInd].track.preview_url || '';\n    this.audioEl.volume = 0.3;\n    this.audioEl.currentTime = currentTime;\n    const playPromise = this.audioEl.play();\n    // Don't console log error\n    playPromise.catch(noop => noop);\n  };\n\n  stopTrack = () => {\n    this.audioEl.pause();\n    this.audioEl.currentTime = 0;\n  };\n\n  pauseTrack = () => {\n    this.audioEl.pause();\n    this.props.pause();\n  };\n\n  handleEnded = () => {\n    if (!this.state.hasNextTrack) {\n      return this.props.stop();\n    }\n    const { playlist, songInd, playNextTrack } = this.props;\n    playNextTrack(playlist, songInd);\n  };\n\n  handlePlay = () => {\n    if (!this.props.playlist) {\n      return;\n    }\n    this.props.unpause();\n  };\n\n  handlePause = () => {\n    const { isPaused, pause, unpause } = this.props;\n    isPaused ? unpause() : pause();\n  };\n\n  handlePrev = () => {\n    const { playlist, songInd, playPrevTrack } = this.props;\n    if (!this.state.hasPrevTrack) {\n      return;\n    }\n    playPrevTrack(playlist, songInd);\n  };\n\n  handleVolumeChange = (value: number) => {\n    this.audioEl.volume = value;\n  };\n\n  UNSAFE_componentWillReceiveProps({\n    isPlaying,\n    isPaused,\n  }: {\n    isPlaying: boolean;\n    isPaused: boolean;\n  }) {\n    const { playing, paused } = this.state;\n    if (isPlaying !== playing || isPaused !== paused) {\n      this.setState(({ currentTime }) => ({\n        currentTime: !isPlaying && !isPaused ? 0 : currentTime,\n        paused: isPaused,\n        playing: isPlaying,\n      }));\n    }\n  }\n\n  componentDidUpdate() {\n    const { paused, playing } = this.state;\n    if (playing && !paused && this.audioEl.paused) {\n      return this.playTrack();\n    }\n    if (playing && paused) {\n      return this.pauseTrack();\n    }\n    if (!playing && !paused) {\n      this.stopTrack();\n    }\n  }\n\n  render() {\n    const { isPlaying, isPaused, playlist, songInd } = this.props;\n    const { hasNextTrack, hasPrevTrack } = this.state;\n    const currentTrack =\n      playlist && songInd !== -1 ? playlist[songInd].track : null;\n\n    return (\n      <Wrapper>\n        <NowPlaying\n          artist={currentTrack ? currentTrack.artists[0].name : ''}\n          title={currentTrack ? currentTrack.name : ''}\n          src={currentTrack ? currentTrack.album.images[0].url : logo}\n        />\n        <PlayerControls\n          isPlaying={!isPaused && isPlaying}\n          hasNextTrack={hasNextTrack}\n          hasPrevTrack={hasPrevTrack}\n          handlePlay={this.handlePlay}\n          handlePause={this.handlePause}\n          handleNext={this.handleEnded}\n          handlePrev={this.handlePrev}\n        />\n        <VolumeControl handleChange={this.handleVolumeChange} />\n      </Wrapper>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any): IStateProps => ({\n  isPaused: state.isPaused,\n  isPlaying: state.isPlaying,\n  playlist: state.tracklist,\n  songInd: state.activeTrackId,\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  pause: () => {\n    dispatch(actions.setPause());\n  },\n  playNextTrack: (playlist: IPlaylist[], songInd: number) => {\n    dispatch(actions.playNextTrack(playlist, songInd));\n  },\n  playPrevTrack: (playlist: IPlaylist[], songInd: number) => {\n    dispatch(actions.playPrevTrack(playlist, songInd));\n  },\n  stop: () => dispatch(actions.stopPlay()),\n  unpause: () => {\n    dispatch(actions.unpause());\n  },\n});\n\nexport { PlayerContainer };\n\nexport default connect<IStateProps, IDispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps\n)(PlayerContainer);\n"]},"metadata":{},"sourceType":"module"}